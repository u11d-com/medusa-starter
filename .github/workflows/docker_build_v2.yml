name: Build Docker Images
on:
  push:
    branches:
      - v2
    tags:
      - "v2*"

concurrency:
  group: ${{ github.ref }}/build-v2
  cancel-in-progress: true

jobs:
  backend:
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request'
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      - name: Save backend files
        run: mv backend backend_backup
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: medusajs/medusa-starter-default
          ref: master
          path: backend
      - name: Restore backend files, use override for medusa-config.ts
        run: |
          shopt -s dotglob  # Enable dotfile globbing
          mv -f backend_backup/* backend/
          mv -f .github/medusa-config.override.ts backend/medusa-config.ts
          rm -rf backend_backup
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/medusa-backend
          labels: |
            org.opencontainers.image.title=MedusaJS Backend
            org.opencontainers.image.description=Medusa JS Backend Starter image
            org.opencontainers.image.vendor=u11d.com
          annotations: |
            org.opencontainers.image.title=MedusaJS Backend
            org.opencontainers.image.description=Medusa JS Backend Starter image
            org.opencontainers.image.vendor=u11d.com
          tags: |
            type=sha,prefix=2-
            type=semver,pattern={{version}}-{{sha}}
            type=semver,pattern={{version}},suffix=-latest
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: backend
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_ENV=development
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
  storefront:
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request'
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Save storefront files
        run: mv storefront storefront_backup
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: medusajs/nextjs-starter-medusa
          ref: main
          path: storefront
      - name: Restore storefront files
        run: |
          shopt -s dotglob  # Enable dotfile globbing
          mv -f storefront_backup/* storefront/
          rm -rf storefront_backup
      - name: Save backend files
        run: mv backend backend_backup
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: medusajs/medusa-starter-default
          ref: master
          path: backend
      - name: Restore backend files
        run: mv -f backend_backup/* backend/ && rm -rf backend_backup
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/medusa-storefront
          labels: |
            org.opencontainers.image.title="MedusaJS Storefront"
            org.opencontainers.image.description="Medusa JS Storefront Starter image"
            org.opencontainers.image.vendor=u11d.com
          tags: |
            type=sha,prefix=2-
            type=semver,pattern={{version}}-{{sha}}
            type=semver,pattern={{version}},suffix=-latest
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Start backend
        run: |
          docker compose -f compose.yaml -f .github/compose.override.yaml up --build -d
      - name: Wait for backend to start
        run: |
          while docker ps --format "{{.ID}} {{.Status}}" | grep -q 'health: starting'; do sleep 5; done
      - name: Seed backend with data
        run: docker compose -f compose.seed.yaml run --rm seed
      - name: Get publishable token
        id: key
        run: |
          export BACKEND_URL="http://localhost:9000"
          curl -fs "${BACKEND_URL}/health"

          # Login and get access token
          export ACCESS_TOKEN=$(curl -s -X POST "${BACKEND_URL}/auth/user/emailpass" \
            -H 'Content-Type: application/json' \
            --data-raw '{
              "email": "admin@medusa-test.com",
              "password": "supersecret"
            }' | jq -r '.token')

          # Get the API key token
          export PUBLISHABLE_KEY=$(curl -s "${BACKEND_URL}/admin/api-keys" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" | jq -r '.api_keys[0].token')
          # Export the key to GitHub outputs
          echo "PUBLISHABLE_KEY=${PUBLISHABLE_KEY}" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: storefront
          add-hosts: |
            host.docker.internal=host-gateway
          build-args: |
            NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=${{ steps.key.outputs.PUBLISHABLE_KEY }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
